* Hey! If you're reading this on Github, you should download this file instead. Github doesn't display org-babel files very well.

by Peixian Wang - 2016/8/3

/This is licensed under MIT, so do what you want with it, modify it, fork it, etc. If you use this code I'd apprechiate an attribution back :>/

*MAKE SURE YOU'RE IN THE RIGHT VIRTUALENV*

Import the supporting cast
#+BEGIN_SRC ipython :session 
  import collectobot
  import yaha_analyzer
  import pandas as pd
  import numpy as np
#+END_SRC

#+RESULTS:


#+BEGIN_SRC ipython :session :results output
  df = pd.read_json('../data/cards.json')
  print(df.head(3))
  print(df.columns)
#+END_SRC

#+RESULTS:
#+begin_example
  artist  attack  collectible  cost  durability dust entourage faction flavor  \
0    NaN     0.0          NaN   0.0         NaN  NaN       NaN     NaN    NaN   
1    NaN     NaN          NaN   2.0         NaN  NaN       NaN     NaN    NaN   
2    NaN     1.0          NaN   1.0         NaN  NaN       NaN     NaN    NaN   

   health     ...     overload  \
0     2.0     ...          NaN   
1     NaN     ...          NaN   
2     1.0     ...          NaN   

                                    playRequirements playerClass    race  \
0                                                NaN      SHAMAN     NaN   
1  {'REQ_MINION_OR_ENEMY_HERO': 0, 'REQ_STEADY_SH...      HUNTER     NaN   
2                                                NaN     NEUTRAL  DRAGON   

  rarity         set spellDamage targetingArrowText  \
0    NaN         TGT         NaN                NaN   
1   FREE  HERO_SKINS         NaN                NaN   
2    NaN         BRM         NaN                NaN   

                                                text        type  
0                             <b>Spell Damage +1</b>      MINION  
1  <b>Hero Power</b>\nDeal $2 damage to the enemy...  HERO_POWER  
2                                                NaN      MINION  

[3 rows x 25 columns]
Index(['artist', 'attack', 'collectible', 'cost', 'durability', 'dust',
       'entourage', 'faction', 'flavor', 'health', 'howToEarn',
       'howToEarnGolden', 'id', 'mechanics', 'name', 'overload',
       'playRequirements', 'playerClass', 'race', 'rarity', 'set',
       'spellDamage', 'targetingArrowText', 'text', 'type'],
      dtype='object')
#+end_example


Filter out all the weird generated cards:

#+BEGIN_SRC ipython :session :results output
  df = df[df['collectible'] == 1.0]
  df = df[pd.notnull(df['cost'])]
#+END_SRC

#+RESULTS:

Fill the spells with 0 attack and 0 health to normalize (there's probably a better way of doing this)
#+BEGIN_SRC ipython :session 
  from sklearn import preprocessing

  df[['attack', 'health']] = df[['attack', 'health']].fillna(0)


  min_max_scaler = preprocessing.MinMaxScaler()
  norm = lambda x: min_max_scaler.fit_transform(x)
  df_t = df[['id', 'attack', 'cost', 'health']]
  df_t[['attack', 'cost', 'health']] = df_t[['attack', 'cost', 'health']].apply(norm)
  print(df_t)
#+END_SRC

#+RESULTS:


#+BEGIN_SRC ipython :session :results output
  import findspark
  findspark.init('/Users/peixianwang/Code/spark-2.0.0')
  import pyspark
  from pyspark.sql import SparkSession
  context = pyspark.SparkContext(appName = 'hs2vec') #Spark variables are camelcase for whatever reason
  spark = SparkSession(context)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :results output
  df = spark.read.json('../data/cards.json')
  print(df_hsjson.printSchema())
#+END_SRC

#+RESULTS:
#+begin_example
root
 |-- artist: string (nullable = true)
 |-- attack: long (nullable = true)
 |-- collectible: boolean (nullable = true)
 |-- cost: long (nullable = true)
 |-- durability: long (nullable = true)
 |-- dust: array (nullable = true)
 |    |-- element: long (containsNull = true)
 |-- entourage: array (nullable = true)
 |    |-- element: string (containsNull = true)
 |-- faction: string (nullable = true)
 |-- flavor: string (nullable = true)
 |-- health: long (nullable = true)
 |-- howToEarn: string (nullable = true)
 |-- howToEarnGolden: string (nullable = true)
 |-- id: string (nullable = true)
 |-- mechanics: array (nullable = true)
 |    |-- element: string (containsNull = true)
 |-- name: string (nullable = true)
 |-- overload: long (nullable = true)
 |-- playRequirements: struct (nullable = true)
 |    |-- REQ_DAMAGED_TARGET: long (nullable = true)
 |    |-- REQ_ENEMY_TARGET: long (nullable = true)
 |    |-- REQ_ENEMY_WEAPON_EQUIPPED: long (nullable = true)
 |    |-- REQ_ENTIRE_ENTOURAGE_NOT_IN_PLAY: long (nullable = true)
 |    |-- REQ_FRIENDLY_MINION_DIED_THIS_GAME: long (nullable = true)
 |    |-- REQ_FRIENDLY_TARGET: long (nullable = true)
 |    |-- REQ_HERO_TARGET: long (nullable = true)
 |    |-- REQ_LEGENDARY_TARGET: long (nullable = true)
 |    |-- REQ_MINIMUM_ENEMY_MINIONS: long (nullable = true)
 |    |-- REQ_MINIMUM_TOTAL_MINIONS: long (nullable = true)
 |    |-- REQ_MINION_CAP_IF_TARGET_AVAILABLE: long (nullable = true)
 |    |-- REQ_MINION_OR_ENEMY_HERO: long (nullable = true)
 |    |-- REQ_MINION_TARGET: long (nullable = true)
 |    |-- REQ_MUST_TARGET_TAUNTER: long (nullable = true)
 |    |-- REQ_NONSELF_TARGET: long (nullable = true)
 |    |-- REQ_NUM_MINION_SLOTS: long (nullable = true)
 |    |-- REQ_STEADY_SHOT: long (nullable = true)
 |    |-- REQ_TARGET_FOR_COMBO: long (nullable = true)
 |    |-- REQ_TARGET_IF_AVAILABLE: long (nullable = true)
 |    |-- REQ_TARGET_IF_AVAILABLE_AND_DRAGON_IN_HAND: long (nullable = true)
 |    |-- REQ_TARGET_IF_AVAILABLE_AND_MINIMUM_FRIENDLY_MINIONS: long (nullable = true)
 |    |-- REQ_TARGET_MAX_ATTACK: long (nullable = true)
 |    |-- REQ_TARGET_MIN_ATTACK: long (nullable = true)
 |    |-- REQ_TARGET_TO_PLAY: long (nullable = true)
 |    |-- REQ_TARGET_WITH_RACE: long (nullable = true)
 |    |-- REQ_UNDAMAGED_TARGET: long (nullable = true)
 |    |-- REQ_WEAPON_EQUIPPED: long (nullable = true)
 |-- playerClass: string (nullable = true)
 |-- race: string (nullable = true)
 |-- rarity: string (nullable = true)
 |-- set: string (nullable = true)
 |-- spellDamage: long (nullable = true)
 |-- targetingArrowText: string (nullable = true)
 |-- text: string (nullable = true)
 |-- textInPlay: string (nullable = true)
 |-- type: string (nullable = true)

None
#+end_example

Filter out the weird not-player cards
#+BEGIN_SRC ipython :session :results output
  df = df.filter(df['playerClass'] != 'null')
  df = df.filter(df['cost'] == 'null')
  df.show(5)
#+END_SRC

#+RESULTS:
#+begin_example
+--------------------+------+-----------+----+----------+--------------------+---------+-------+--------------------+------+--------------------+--------------------+-------+-------------+------------+--------+--------------------+-----------+-----+---------+-------+-----------+------------------+--------------------+----------+------+
|              artist|attack|collectible|cost|durability|                dust|entourage|faction|              flavor|health|           howToEarn|     howToEarnGolden|     id|    mechanics|        name|overload|    playRequirements|playerClass| race|   rarity|    set|spellDamage|targetingArrowText|                text|textInPlay|  type|
+--------------------+------+-----------+----+----------+--------------------+---------+-------+--------------------+------+--------------------+--------------------+-------+-------------+------------+--------+--------------------+-----------+-----+---------+-------+-----------+------------------+--------------------+----------+------+
|Alex Horley Orlan...|  null|       true|   3|      null|                null|     null|   null|"I've just sucked...|  null|Unlocked at Level 1.|Unlocked at Level...|CS2_061|         null|  Drain Life|    null|[null,null,null,n...|    WARLOCK| null|     FREE|   CORE|       null|              null|Deal $2 damage. R...|      null| SPELL|
|        Raven Mimura|  null|       true|   3|      null|    [40, 400, 5, 50]|     null|   null|Generally demons ...|  null|                null|                null|EX1_317|         null|Sense Demons|    null|                null|    WARLOCK| null|   COMMON|EXPERT1|       null|              null|Put 2 random Demo...|      null| SPELL|
|Alex Horley Orlan...|     1|       true|   4|      null|[400, 1600, 100, ...|     null|   null|Crescendo himself...|     1|                null|                null| AT_019|[DEATHRATTLE]|  Dreadsteed|    null|                null|    WARLOCK|DEMON|     EPIC|    TGT|       null|              null|<b>Deathrattle:</...|      null|MINION|
|     Slawomir Maniak|  null|       true|   0|      null|    [40, 400, 5, 50]|     null|   null|They're only smil...|  null|                null|                null|EX1_607|         null|  Inner Rage|    null|[null,null,null,n...|    WARRIOR| null|   COMMON|EXPERT1|       null|              null|Deal $1 damage to...|      null| SPELL|
|          Andrew Hou|     4|       true|   7|      null|[1600, 3200, 400,...|     null|   null|With the help of ...|     2|                null|                null| AT_063|         null|     Acidmaw|    null|                null|     HUNTER|BEAST|LEGENDARY|    TGT|       null|              null|Whenever another ...|      null|MINION|
+--------------------+------+-----------+----+----------+--------------------+---------+-------+--------------------+------+--------------------+--------------------+-------+-------------+------------+--------+--------------------+-----------+-----+---------+-------+-----------+------------------+--------------------+----------+------+
only showing top 5 rows

#+end_example

#+BEGIN_SRC ipython :session :results output
  df.fillna()

  max_cost = df.agg({'cost': 'max'}).first()[0]
  max_attack = df.agg({'attack': 'max'}).first()[0]
  max_health = df.agg({'health': 'max'}).first()[0]


#+END_SRC
